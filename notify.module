<?php
// $Id$

function notify_system($field) {
  $system["description"] = t("Enables notifications by email");
  return $system[$field];
}

function notify_content($node, $notify) {
  switch ($notify->teasers) {
    case 0:
      break;
    case 1:
      $output = $node->teaser ? strip_tags("$node->teaser\n") : "";
      break;
    case 2:
      $output = $node->body ? strip_tags("$node->body\n") : "";
  }
  return $output;
}

function notify_send() {
  global $base_url;
  $period = variable_get("notify_send_last", time() - variable_get("notify_send", 86400));

  // Fetch all new nodes
  $nresult = db_query("SELECT n.body, n.nid, n.type, n.title, n.promote, n.moderate, n.teaser, n.created, n.changed, u.name FROM {node} n LEFT JOIN {users} u ON n.uid = u.uid WHERE n.status = 1 AND n.created > %d ORDER BY n.created", $period);
  $php_node_types = array("book", "page");
  while ($node = db_fetch_object($nresult)) {
    // 030312AX: do not notify / show nodes containing php code
    // TODO: should these be eval'ed?
    if (!(in_array($node->type, $php_node_types) && db_fetch_object(db_query("SELECT nid FROM {$node->type} WHERE nid = %d AND format = 1", $node->nid)))) {
      $nodes[$node->nid] = $node;
    }
  }

  // Fetch new comments
  $cresult = db_query("SELECT c.cid, c.nid, c.subject, c.pid, u.name FROM {comments} c LEFT JOIN {users} u ON u.uid = c.uid WHERE c.status = 0 AND c.timestamp > %d ORDER BY c.nid, c.timestamp", $period);
  while ($comment = db_fetch_object($cresult)) {
    $comments[$comment->nid][] = $comment;
  }

  // Fetch users with notify enabled
  $uresult = db_query("SELECT uid, status, node, teasers, comment FROM {notify} WHERE status = 1". (($notify_attempts = variable_get(notify_attempts, 5)) ? " AND attempts <= %d" : ""), $notify_attempts);

  $from = variable_get("site_mail", ini_get("sendmail_from"));
  while ($notify = db_fetch_object($uresult)) {
    $user = user_load(array("uid" => $notify->uid));
    $subject = variable_get("site_name", "drupal") ." ". t("notification for %name", array ("%name" =>$user->name));
    $body = "";
    // New content
    if ($notify->node && count($nodes)) {
      $body .= t("Recent content") ."\n". str_repeat("-", strlen(t("Recent content"))) ."\n\n";
      foreach ($nodes as $node) {
        if ($notify->moderate) {
          $body .= strtr(t("%status %type by %author: %title"), array("%status" => "queued", "%type" => $node->type, "%title" => check_output($node->title), "%author" => ($node->name ? $node->name : variable_get(anonymous, "Anonymous")))) ."\n";
          $body .= notify_content($node, $notify);
          $body .= "  [ ". url("queue/view/$node->nid") ." ]\n\n";
        }
        elseif (!$notify->moderate && $node->nid) {
          $body .= strtr(t("%status %type by %author: %title"), array("%status" => "published", "%type" => $node->type, "%title" => check_output($node->title), "%author" => ($node->name ? $node->name : variable_get(anonymous, "Anonymous")))) ."\n";
          $body .= notify_content($node, $notify);
          $body .= "  [ ". url("node/view/$node->nid") ." ]\n\n";
        }
      }
    }

    // New comments
    if ($notify->comment && count($comments)) {
      $body .= t("Recent comments") ."\n". str_repeat("-", strlen(t("Recent comments"))) ."\n\n";
      foreach ($comments as $nid => $comment) {
        if ($nid != $nid_old) {
          if (strlen($nodes[$nid]->title) < 2) {
            $result = db_query("SELECT title FROM {node} WHERE nid = %d", $nid);
            $nodes[$nid] = db_fetch_object($result);
          }
          $body .= strtr(t("%count new comments attached to %title"), array("%count" => count($comment), "%title" => $nodes[$nid]->title)) ."\n";
          $nid_old = $nid;
        }
        foreach ($comment as $c) {
          $body .= "  ". strtr(t("%title by %author"), array("%title" => check_output($c->subject), "%author" => ($c->name ? $c->name : variable_get(anonymous, "Anonymous")))) ."\n"
                .  "    ". url("node/view/$nid/$c->cid#$c->cid") ."\n\n";
        }
      }

      if ($body) {
        $to = $user->mail;

        $body = t("Greetings") ." ". $user->name .",\n\n$body";

        $body .= "\n-- \n";
        $body .= t("This is an automatic mail from") ." ". variable_get("site_name", "drupal") ."\n";
        $body .= t("To stop receiving these mails go to") ." $base_url/\n";

        if (!user_mail($to, $subject, wordwrap($body, 72), "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: <$from>\nErrors-to: $from\n")) {
          db_query("UPDATE {notify} SET attempts = attempts + 1 WHERE uid = %d", $user->uid);
        }
      }
    }
  }
}

function notify_settings() {
  $period = array(900 => format_interval(900), 1800 => format_interval(1800), 3600 => format_interval(3600), 10800 => format_interval(10800), 21600 => format_interval(21600), 32400 => format_interval(32400), 43200 => format_interval(43200), 86400 => format_interval(86400), 172800 => format_interval(172800), 259200 => format_interval(259200), 604800 => format_interval(604800), 1209600 => format_interval(1209600), 2419200 => format_interval(2419200), 1000000000 => "Never");
  $output .= form_select(t("Send notifications every"), "notify_send", variable_get("notify_send", 86400), $period, t("Requires crontab."));
  $output .= form_select(t("Number of failed sends after which notifications are disabled"), "notify_attempts", variable_get("notify_attempts", 5), array(t("Disabled"), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20));

  return $output;
}

function notify_cron() {
  if (time() - variable_get("notify_send_last", 0) > variable_get("notify_send", 86400)) {
    notify_send();
    variable_set("notify_send_last", time());
  }
}

function notify_perm() {
  return array("access notify", "administer notify");
}

function notify_link($type) {
  if ($type == "system") {
    global $user;
    if ($user->uid) {
      menu("notify", t("my notify settings"), "notify_page", 0);
    }
    if (user_access("administer notify")) {
      menu("admin/user/notify", "notifications", "notify_admin", NULL, 8);
    }
  }

  return array();
}

function notify_page() {
  global $user;

  $op = $_POST["op"];
  $edit = $_POST["edit"];

  if (user_access("access notify") && $user) {
    switch ($op) {
      case "cron":
        notify_send();
        break;
      case t("Save settings"):
        db_query("REPLACE {notify} (uid, status, node, teasers, comment) VALUES (%d, %d, %d, %d, %d)", $user->uid, $edit["status"], $edit["node"], $edit["teasers"], $edit["comment"]);
        $form .= status(t("Settings saved"));
      default:
        $result = db_query("SELECT u.name, u.mail, n.status, n.node, n.teasers, n.comment FROM {users} u LEFT JOIN {notify} n ON u.uid = n.uid WHERE u.uid = %d AND u.status = 1 ORDER BY u.name", $user->uid);
        $notify = db_fetch_object($result);

        $form .= form_select(t("Notify status"), "status", $notify->status, array(t("Disabled"), t("Enabled")), t("Do you wish to receive periodic emails when new content is posted?"));
        $form .= form_select(t("Notify new content"), "node", $notify->node, array(t("Disabled"), t("Enabled")), t("Include new content in the notification mail."));
        $form .= form_select(t("Content"), "teasers", $notify->teasers, array(t("Title only"), t("Title + Teaser"), t("Title + Body")), t("Select the amount of each post that you would like to see in your notification emails."));
        $form .= form_select(t("Notify new comments"), "comment", $notify->comment, array(t("Disabled"), t("Enabled")), t("Include new comments in the notification mail."));
        $form .= form_submit(t("Save settings"));

        theme("header");
        theme("box", t("Notify"), form($form));

        theme("footer");
    }
  }
  else {
    print message_access();
  }
}

function notify_admin() {
  $op = $_POST["op"];

  switch ($op) {
    case "Save":
      $edit = $_POST["edit"];
      foreach ($edit as $uid=>$settings) {
        db_query("UPDATE {notify} SET node = %d, teasers = %d, comment = %d WHERE uid = %d", $settings['node'], $settings['teasers'], $settings['comment'], $uid);
      }
    default:
      $result = db_query("SELECT u.uid, u.name, u.mail, n.* FROM {users} u LEFT JOIN {notify} n ON u.uid = n.uid WHERE n.status = 1 AND u.status = 1 ORDER BY u.name");
      $header = array (t("username"), t("email address"), t("content"), t("teasers"), t("comment"), t("failed attempts"));
      $i = 0;
      while ($notify = db_fetch_object($result)) {
        $rows[$i][] = format_name($notify);
        $rows[$i][] = $notify->mail;
        // 030312AX TODO: it really is a shame that we cannot use form_* functions
        // here (as they wrap everything into <p>title description</p>). implement
        // this once (see mailing list)!
        //$rows[$i][] = form_hidden("$notify->uid][status", 0) ."<input type=\"checkbox\" name=\"edit[$notify->uid][status]\"". ($notify->status ? " checked=\"checked\"" : "") .">";
        $rows[$i][] = form_hidden("$notify->uid][node", 0) .'<input type="checkbox" name="edit['. $notify->uid .'][node]" value="1"'. ($notify->node ? ' checked="checked"' : '') .'>';
        $select = "";
        foreach (array(t("Title only"), t("Title + Teaser"), t("Title + Body")) as $key => $choice) {
          $select .= '<option value="'. $key .'"'. ($key == $notify->teasers ? " selected=\"selected\"" : "") .">$choice</option>";
        }
        $rows[$i][] = '<select name="edit['. $notify->uid .'][teasers]">'. $select .'</select>';
        $rows[$i][] = form_hidden("$notify->uid][comment", 0) .'<input type="checkbox" name="edit['. $notify->uid .'][comment]" value="1"'. ($notify->comment ? ' checked="checked"' : '') .">";
        $rows[$i][] = $notify->attempts;
        $i++;
      }
      $rows[$i][] = form_submit("Save");
      $output = table($header, $rows);
      print form($output);
  }
}

?>
